*PCMfile
{
   #include "PCM.h"
   typedef struct {
      FILE *p;
      char name[PCMFILENAME];
      long long nlines;
      long long nwords;
      long long nbytes;
      long long ndigits;
      long long countofchar[PCMCHAR];
   } PCMfile;

   int PCMfilecreate(PCMfile **fp);
   int PCMfilefree(PCMfile **fp);

   int PCMfileopen(PCMfile *fp, const char *name);
   int PCMfilestatistics(PCMfile *fp);
   int PCMfilegetline(/*in*/ PCMfile *fp,
         /*in*/ int     max,
         /*out*/char    *line,
         /*out*/int     *length);
   int PCMfilegetmaxline(PCMfile *fp, char *maxline, int *max);
   int PCMfilegetinfo(PCMfile *fp);
    
}

PCMsort + PCMfind 在PCMseqlist里面被使用
*PCMsort // 默认为qsort
{
   #include "PCM.h"
   int PCMbubblesort(int *a, int len);
   int PCMselectsort(int *a, int len);
   int PCMshellsort (int *a, int len);
}

*PCMfind // 默认为PCMoriginfind
{
   #include "PCM.h"
   int PCMoriginfind (int *a, int length, const int elem, int *index);
   int PCMbinfind (int *a, int length, const int elem, int *index);
}

*PCMmath
{
   #include "PCM.h"
   int PCMpower(int base, int  n, long long *result);
}

*PCMseqlist
{
   #include "PCM.h"
   #include "PCMsort.h"
   #include "PCMfind.h"

   typedef struct {
      int *elemp;     /* The basic address of list */
      int  length;        /* The length of list */
      int  capacity;      /* The capacity of list*/
   } PCMseqlist;

   typedef PCMseqlist* PCMSList;

   int PCMseqlistinit(PCMseqlist **list);
   int PCMseqlistfree(PCMseqlist **list);
   int PCMseqlistcopy(PCMseqlist *list, const int *arr, int count);
   int PCMseqlistmerge(PCMseqlist *des, const PCMseqlist* src);
   int PCMseqlistclear(PCMseqlist *list);
   int PCMseqlistinsert(PCMseqlist *list, int index, const int elem);
   int PCMseqlistdelete(PCMseqlist *list, int index, int* e);
   int PCMseqlistdeleteR(PCMseqlist *list);
   int PCMseqlistoutput(PCMseqlist *list);
   int PCMseqlistsort(PCMseqlist *list, int length, enum PCMSORTALG alg);
   int PCMseqlistfind(PCMseqlist *list, int length, const int elem,
         int *index, enum PCMSEARCHALG alg);
}

*PCMlinkedlist
{
   #include "PCM.h"

   typedef struct PCMlinkednode {
      char               *elem;
      struct PCMlinkednode *next;
      struct PCMlinkednode *prev;
   } PCMlinkednode;

   typedef struct PCMlinkedlist{
      struct PCMlinkednode *first;
      struct PCMlinkednode *last;
   } PCMlinkedlist;

   typedef PCMlinkednode* PCMlinkednodep;
   typedef PCMlinkedlist* PCMlinkedlistp;

   /* PCMlinkednode functions */
   void PCMnodefree           (PCMlinkednode **node);
   int  PCMnodeallocandinit (PCMlinkednode **node, const char* elem);

   /* PCMlinkedlist functions */
   int  PCMlinkedlistinit   (PCMlinkedlist **list);
   int  PCMlinkedlistclear  (PCMlinkedlist *list);
   int  PCMlinkedlistfree   (PCMlinkedlist **list);

   int  PCMlinkedlistappend (PCMlinkedlist *list, const char* elem);
   int  PCMlinkedlistinsert (PCMlinkedlist *list, int pos, const char* elem);
   int  PCMlinkedlistpop    (PCMlinkedlist *list, enum PCMPOPTYPE type);

   int  PCMlinkedlistlength (PCMlinkedlist *list);

   int  PCMlinkedlistoutput (PCMlinkedlist *list, const char* sp);
}

*PCMstack
{
   #include "PCM.h"
   typedef struct {
      int    top;
      void   **data;
      size_t size;
   } PCMstack;

   int   PCMstackcreate  (PCMstack **sp, size_t size);
   void  PCMstackfree    (PCMstack **sp, FREEFUNC freefunc);
   void* PCMstackpop     (PCMstack *s);
   int   PCMstackpush    (PCMstack *s, void *elem);
   int   PCMstackisempty (PCMstack *s);
}
