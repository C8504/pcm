!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BOOL	include/ORCconstant.h	/^   enum BOOL {$/;"	g
Base	test/cast.cpp	/^class Base$/;"	c	file:
C	bin/makefile	/^C=.c$/;"	m
CCOMPILE	bin/makefile	/^CCOMPILE=gcc$/;"	m
CPP	bin/makefile	/^CPP=.cpp$/;"	m
CPPCOMPILE	bin/makefile	/^CPPCOMPILE=g++$/;"	m
CPU	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
CSRC	bin/makefile	/^CSRC=..\/src\/ORClinkedlist$(C)\\$/;"	m
CTEST	bin/makefile	/^CTEST=$(TESTDIR)test_link_init_and_free$(C)\\$/;"	m
Derived	test/cast.cpp	/^class Derived:public Base$/;"	c	file:
E	bin/makefile	/^E=$/;"	m
EXE	bin/makefile	/^EXE=test_link_init_and_free$(E)\\$/;"	m
ErrorMap	include/ORCerrormap.h	/^   } ErrorMap;$/;"	t	typeref:struct:__anon4
FALSE	include/ORCconstant.h	/^      FALSE,$/;"	e	enum:BOOL
FREEFUNC	include/ORCconstant.h	/^   typedef void (*FREEFUNC) (void* p);$/;"	t
H_CONSTANT	include/ORCconstant.h	2;"	d
H_ERRORMAP	include/ORCerrormap.h	2;"	d
H_FIND	include/ORCfind.h	2;"	d
H_INOUT	include/inout.h	2;"	d
H_LINKEDLIST	include/ORClinkedlist.h	2;"	d
H_ORC	include/ORC.h	2;"	d
H_ORCFILE	include/ORCfile.h	2;"	d
H_ORCMATH	include/ORCmath.h	2;"	d
H_ORCSTACK	include/ORCstack.h	2;"	d
H_ORCSTRING	include/ORCstring.h	2;"	d
H_SEQLIST	include/ORCseqlist.h	2;"	d
H_SORT	include/ORCsort.h	2;"	d
INCLUDE	bin/makefile	/^INCLUDE=..\/include\/$/;"	m
LOG	bin/makefile	/^LOG=.log$/;"	m
LOGFILES	bin/makefile	/^LOGFILES=test_link_init_and_free$(LOG)\\$/;"	m
ORCALGBINFIND	include/ORCconstant.h	/^                      ORCALGBINFIND};$/;"	e	enum:ORCSEARCHALG
ORCALGORIGINFIND	include/ORCconstant.h	/^   enum ORCSEARCHALG {ORCALGORIGINFIND = 90001,$/;"	e	enum:ORCSEARCHALG
ORCALGSORTBUBBLE	include/ORCconstant.h	/^                    ORCALGSORTBUBBLE};$/;"	e	enum:ORCSORTALG
ORCALGSORTSELECT	include/ORCconstant.h	/^   enum ORCSORTALG {ORCALGSORTSELECT = 80001,$/;"	e	enum:ORCSORTALG
ORCCHAR	include/ORCconstant.h	15;"	d
ORCERR	include/ORCconstant.h	/^   enum ORCERR {$/;"	g
ORCERRELEMENTNOTFOUND	include/ORCconstant.h	/^      ORCERRELEMENTNOTFOUND,$/;"	e	enum:ORCERR
ORCERREMPTYLIST	include/ORCconstant.h	/^      ORCERREMPTYLIST,$/;"	e	enum:ORCERR
ORCERREND	include/ORCconstant.h	/^      ORCERREND   = 20000$/;"	e	enum:ORCERR
ORCERRNOMEMORY	include/ORCconstant.h	/^      ORCERRNOMEMORY,$/;"	e	enum:ORCERR
ORCERRNOTSTACKANDQUEUE	include/ORCconstant.h	/^      ORCERRNOTSTACKANDQUEUE,$/;"	e	enum:ORCERR
ORCERRNOTVALIDINDEX	include/ORCconstant.h	/^      ORCERRNOTVALIDINDEX,$/;"	e	enum:ORCERR
ORCERRNULLPOINTER	include/ORCconstant.h	/^      ORCERRNULLPOINTER,$/;"	e	enum:ORCERR
ORCERRSTART	include/ORCconstant.h	/^      ORCERRSTART = 10000,$/;"	e	enum:ORCERR
ORCFILEMAXLINE	include/ORCconstant.h	13;"	d
ORCFILENAME	include/ORCconstant.h	14;"	d
ORCLISTINCREMENT	include/ORCconstant.h	11;"	d
ORCLISTINITSIZE	include/ORCconstant.h	10;"	d
ORCPOPQUEUE	include/ORCconstant.h	/^   enum ORCPOPTYPE {ORCPOPQUEUE = 0, ORCPOPSTACK};$/;"	e	enum:ORCPOPTYPE
ORCPOPSTACK	include/ORCconstant.h	/^   enum ORCPOPTYPE {ORCPOPQUEUE = 0, ORCPOPSTACK};$/;"	e	enum:ORCPOPTYPE
ORCPOPTYPE	include/ORCconstant.h	/^   enum ORCPOPTYPE {ORCPOPQUEUE = 0, ORCPOPSTACK};$/;"	g
ORCSEARCHALG	include/ORCconstant.h	/^   enum ORCSEARCHALG {ORCALGORIGINFIND = 90001,$/;"	g
ORCSList	include/ORCseqlist.h	/^   typedef ORCseqlist* ORCSList;$/;"	t
ORCSORTALG	include/ORCconstant.h	/^   enum ORCSORTALG {ORCALGSORTSELECT = 80001,$/;"	g
ORCbinfind	src/ORCfind.c	/^ORCbinfind(int *a, $/;"	f
ORCbubblesort	src/ORCsort.c	/^ORCbubblesort(int *a,$/;"	f
ORCcheckerror	src/ORC.c	/^ORCcheckerror (int error) {$/;"	f
ORCcheckpointer	src/ORC.c	/^ORCcheckpointer(void *p)$/;"	f
ORCdarrayfree	src/ORC.c	/^ORCdarrayfree (void **arr)$/;"	f
ORCdarraynew	src/ORC.c	/^ORCdarraynew (size_t row, size_t col, size_t size)$/;"	f
ORCdelcharofstring	src/ORCstring.c	/^ORCdelcharofstring (char * str,$/;"	f
ORCfile	include/ORCfile.h	/^   } ORCfile;$/;"	t	typeref:struct:__anon5
ORCfilecreate	src/ORCfile.c	/^ORCfilecreate (ORCfile **fp) {$/;"	f
ORCfilefree	src/ORCfile.c	/^ORCfilefree (ORCfile **fp){$/;"	f
ORCfilegetinfo	src/ORCfile.c	/^ORCfilegetinfo (ORCfile *fp){$/;"	f
ORCfilegetline	src/ORCfile.c	/^ORCfilegetline (ORCfile *fp,$/;"	f
ORCfilegetmaxline	src/ORCfile.c	/^ORCfilegetmaxline (ORCfile *fp,$/;"	f
ORCfileopen	src/ORCfile.c	/^ORCfileopen (ORCfile *fp, const char *name){$/;"	f
ORCfilestatistics	src/ORCfile.c	/^ORCfilestatistics (ORCfile *fp)$/;"	f
ORClinkedlist	include/ORClinkedlist.h	/^   typedef struct ORClinkedlist{$/;"	s
ORClinkedlist	include/ORClinkedlist.h	/^   } ORClinkedlist;$/;"	t	typeref:struct:ORClinkedlist
ORClinkedlistappend	src/ORClinkedlist.c	/^ORClinkedlistappend (ORClinkedlist *list,$/;"	f
ORClinkedlistclear	src/ORClinkedlist.c	/^ORClinkedlistclear (ORClinkedlist *list)$/;"	f
ORClinkedlistfree	src/ORClinkedlist.c	/^ORClinkedlistfree (ORClinkedlist **list)$/;"	f
ORClinkedlistinit	src/ORClinkedlist.c	/^ORClinkedlistinit (ORClinkedlist **list)$/;"	f
ORClinkedlistinsert	src/ORClinkedlist.c	/^ORClinkedlistinsert (ORClinkedlist *list,$/;"	f
ORClinkedlistlength	src/ORClinkedlist.c	/^ORClinkedlistlength(ORClinkedlist *list)$/;"	f
ORClinkedlistoutput	src/ORClinkedlist.c	/^ORClinkedlistoutput (ORClinkedlist *list,$/;"	f
ORClinkedlistp	include/ORClinkedlist.h	/^   typedef ORClinkedlist* ORClinkedlistp;$/;"	t
ORClinkedlistpop	src/ORClinkedlist.c	/^ORClinkedlistpop (ORClinkedlist *list,$/;"	f
ORClinkednode	include/ORClinkedlist.h	/^   typedef struct ORClinkednode {$/;"	s
ORClinkednode	include/ORClinkedlist.h	/^   } ORClinkednode;$/;"	t	typeref:struct:ORClinkednode
ORClinkednodep	include/ORClinkedlist.h	/^   typedef ORClinkednode* ORClinkednodep;$/;"	t
ORCnodeallocandinit	src/ORClinkedlist.c	/^ORCnodeallocandinit (ORClinkednode **node,$/;"	f
ORCnodefree	src/ORClinkedlist.c	/^ORCnodefree (ORClinkednode **node)$/;"	f
ORCoriginfind	src/ORCfind.c	/^ORCoriginfind(int *a,$/;"	f
ORCpower	src/ORCmath.c	/^ORCpower(int base,$/;"	f
ORCselectsort	src/ORCsort.c	/^ORCselectsort(int *a,$/;"	f
ORCseqlist	include/ORCseqlist.h	/^   } ORCseqlist;$/;"	t	typeref:struct:__anon6
ORCseqlistclear	src/ORCseqlist.c	/^ORCseqlistclear (ORCseqlist *list)$/;"	f
ORCseqlistcopy	src/ORCseqlist.c	/^ORCseqlistcopy (ORCseqlist *list, const int *arr, int count)$/;"	f
ORCseqlistdelete	src/ORCseqlist.c	/^ORCseqlistdelete (ORCseqlist *list,$/;"	f
ORCseqlistdeleteR	src/ORCseqlist.c	/^ORCseqlistdeleteR(ORCseqlist *list)$/;"	f
ORCseqlistfind	src/ORCseqlist.c	/^ORCseqlistfind (ORCseqlist *list,$/;"	f
ORCseqlistfree	src/ORCseqlist.c	/^ORCseqlistfree (ORCseqlist **list)$/;"	f
ORCseqlistinit	src/ORCseqlist.c	/^ORCseqlistinit (ORCseqlist **list)$/;"	f
ORCseqlistinsert	src/ORCseqlist.c	/^ORCseqlistinsert (ORCseqlist *list,$/;"	f
ORCseqlistmerge	src/ORCseqlist.c	/^ORCseqlistmerge (ORCseqlist *des, const ORCseqlist* src)$/;"	f
ORCseqlistoutput	src/ORCseqlist.c	/^ORCseqlistoutput (ORCseqlist *list)$/;"	f
ORCseqlistsort	src/ORCseqlist.c	/^ORCseqlistsort (ORCseqlist *list,$/;"	f
ORCstack	include/ORCstack.h	/^   } ORCstack;$/;"	t	typeref:struct:__anon7
ORCstackcreate	src/ORCstack.c	/^ORCstackcreate (ORCstack **sp, size_t size){$/;"	f
ORCstackfree	src/ORCstack.c	/^ORCstackfree (ORCstack **sp, FREEFUNC freefunc)$/;"	f
ORCstackisempty	src/ORCstack.c	/^ORCstackisempty (ORCstack *s)$/;"	f
ORCstackpop	src/ORCstack.c	/^ORCstackpop (ORCstack *s)$/;"	f
ORCstackpush	src/ORCstack.c	/^ORCstackpush (ORCstack *s, void *elem)$/;"	f
ORCstrblkstoblk	src/ORCstring.c	/^ORCstrblkstoblk (char *str) {$/;"	f
ORCstreverse	src/ORCstring.c	/^ORCstreverse (char *str)$/;"	f
ORCstrindex	src/ORCstring.c	/^ORCstrindex(char *str, char *substr, int *index)$/;"	f
ORCstrlen	src/ORCstring.c	/^ORCstrlen (const char *str,$/;"	f
ORCstrncat	src/ORCstring.c	/^ORCstrncat (char *des,$/;"	f
ORCstrncpy	src/ORCstring.c	/^ORCstrncpy (char       *des,$/;"	f
ORCstrtrim	src/ORCstring.c	/^ORCstrtrim (char *str)$/;"	f
ORCswapchar	src/ORC.c	/^ORCswapchar (char* arr,$/;"	f
TESTDIR	bin/makefile	/^TESTDIR=..\/test\/$/;"	m
TRUE	include/ORCconstant.h	/^      TRUE$/;"	e	enum:BOOL
capacity	include/ORCseqlist.h	/^      int  capacity;      \/* The capacity of list*\/$/;"	m	struct:__anon6
computer	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	g	file:
countofchar	include/ORCfile.h	/^      long long countofchar[ORCCHAR];$/;"	m	struct:__anon5
data	include/ORCstack.h	/^      void   **data;$/;"	m	struct:__anon7
elem	include/ORClinkedlist.h	/^      char               *elem;$/;"	m	struct:ORClinkednode
elemp	include/ORCseqlist.h	/^      int *elemp;     \/* The basic address of list *\/$/;"	m	struct:__anon6
error	include/ORCerrormap.h	/^      int        error;$/;"	m	struct:__anon4
errorMap	include/ORCerrormap.h	/^      ErrorMap errorMap[] = {$/;"	v
first	include/ORClinkedlist.h	/^      struct ORClinkednode *first;$/;"	m	struct:ORClinkedlist	typeref:struct:ORClinkedlist::ORClinkednode
floatval	test/union.c	/^      float floatval;$/;"	m	struct:u::__anon3	file:
fun	test/cast.cpp	/^void fun(Base* base)$/;"	f
inout	src/inout.c	/^int inout()$/;"	f
intval	test/union.c	/^      int intval;$/;"	m	struct:u::__anon2	file:
keyboard	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
last	include/ORClinkedlist.h	/^      struct ORClinkednode *last;$/;"	m	struct:ORClinkedlist	typeref:struct:ORClinkedlist::ORClinkednode
length	include/ORCseqlist.h	/^      int  length;        \/* The length of list *\/$/;"	m	struct:__anon6
m1	test/cast.cpp	/^      void m1()$/;"	f	class:Base
m2	test/cast.cpp	/^      void m2()$/;"	f	class:Derived
main	test/cast.cpp	/^int main()$/;"	f
main	test/enum.c	/^int main(void)$/;"	f
main	test/macro.c	/^int main(void)$/;"	f
main	test/sizeof.c	/^int main(void)$/;"	f
main	test/terminate.c	/^int main(void)$/;"	f
main	test/test_ORC.c	/^int main(void)$/;"	f
main	test/test_ORCfile.c	/^main ()$/;"	f
main	test/test_ORCmath.c	/^int main (void)$/;"	f
main	test/test_ORCstack.c	/^int main(void)$/;"	f
main	test/test_ORCstring.c	/^int main (void)$/;"	f
main	test/test_check_bounds.c	/^int main(void)$/;"	f
main	test/test_link_init_and_free.c	/^int main(void)$/;"	f
main	test/test_link_many_element.c	/^int main(void)$/;"	f
main	test/test_link_one_element.c	/^int main(void)$/;"	f
main	test/test_link_readfile.c	/^int main(void)$/;"	f
main	test/test_sq_delete.c	/^int main(void)$/;"	f
main	test/test_sq_init_and_free.c	/^int main(void)$/;"	f
main	test/test_sq_inout.c	/^main (void)$/;"	f
main	test/test_sq_insert.c	/^int main(void)$/;"	f
main	test/test_sq_merge.c	/^int main(void)$/;"	f
main	test/test_sq_sort_and_find.c	/^int main(void)$/;"	f
main	test/unicode.c	/^int main()$/;"	f
main	test/union.c	/^int main(void)$/;"	f
main	test/void.c	/^int main(void)$/;"	f
mouse	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
name	include/ORCfile.h	/^      char name[ORCFILENAME];$/;"	m	struct:__anon5
nchars	include/ORCfile.h	/^      long long nchars;$/;"	m	struct:__anon5
ndigits	include/ORCfile.h	/^      long long ndigits;$/;"	m	struct:__anon5
next	include/ORClinkedlist.h	/^      struct ORClinkednode *next;$/;"	m	struct:ORClinkednode	typeref:struct:ORClinkednode::ORClinkednode
nlines	include/ORCfile.h	/^      long long nlines;$/;"	m	struct:__anon5
nwords	include/ORCfile.h	/^      long long nwords;$/;"	m	struct:__anon5
p	include/ORCfile.h	/^      FILE *p;$/;"	m	struct:__anon5
prev	include/ORClinkedlist.h	/^      struct ORClinkednode *prev;$/;"	m	struct:ORClinkednode	typeref:struct:ORClinkednode::ORClinkednode
printer	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
s	test/union.c	/^   } s;$/;"	m	union:u	typeref:struct:u::__anon1	file:
screen	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
sf	test/union.c	/^   } sf;$/;"	m	union:u	typeref:struct:u::__anon3	file:
si	test/union.c	/^   } si;$/;"	m	union:u	typeref:struct:u::__anon2	file:
size	include/ORCstack.h	/^      size_t size;$/;"	m	struct:__anon7
str	include/ORCerrormap.h	/^      const char *str;$/;"	m	struct:__anon4
testmanyelements	test/test_link_many_element.c	/^int testmanyelements()$/;"	f
testoneelement	test/test_link_one_element.c	/^int testoneelement(void)$/;"	f
top	include/ORCstack.h	/^      int    top;$/;"	m	struct:__anon7
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon1	file:
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon2	file:
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon3	file:
u	test/union.c	/^union u{$/;"	u	file:
