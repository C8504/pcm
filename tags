!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
Base	test/cast.cpp	/^class Base$/;"	c	file:
C	bin/makefile	/^C=.c$/;"	m
CCOMPILE	bin/makefile	/^CCOMPILE=gcc$/;"	m
CPP	bin/makefile	/^CPP=.cpp$/;"	m
CPPCOMPILE	bin/makefile	/^CPPCOMPILE=g++$/;"	m
CPU	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
CSRC	bin/makefile	/^CSRC=..\/src\/ORClinkedlist$(C)\\$/;"	m
CTEST	bin/makefile	/^CTEST=$(TESTDIR)test_link_init_and_free$(C)\\$/;"	m
Derived	test/cast.cpp	/^class Derived:public Base$/;"	c	file:
E	bin/makefile	/^E=$/;"	m
EXE	bin/makefile	/^EXE=test_link_init_and_free$(E)\\$/;"	m
ErrorMap	include/ORCerrormap.h	/^} ErrorMap;$/;"	t	typeref:struct:__anon4
H_CONSTANT	include/ORCconstant.h	2;"	d
H_ERRORMAP	include/ORCerrormap.h	2;"	d
H_FIND	include/ORCfind.h	2;"	d
H_INOUT	include/inout.h	2;"	d
H_LINKEDLIST	include/ORClinkedlist.h	2;"	d
H_ORC	include/ORC.h	2;"	d
H_ORCFILE	include/ORCfile.h	2;"	d
H_ORCMATH	include/ORCmath.h	2;"	d
H_ORCSTRING	include/ORCstring.h	2;"	d
H_SEQLIST	include/ORCseqlist.h	2;"	d
H_SORT	include/ORCsort.h	2;"	d
INCLUDE	bin/makefile	/^INCLUDE=..\/include\/$/;"	m
LOG	bin/makefile	/^LOG=.log$/;"	m
LOGFILES	bin/makefile	/^LOGFILES=test_link_init_and_free$(LOG)\\$/;"	m
ORCALGORIGINFIND	include/ORCconstant.h	/^enum ORCSEARCHALG {ORCALGORIGINFIND = 90001};$/;"	e	enum:ORCSEARCHALG
ORCALGSORTBUBBLE	include/ORCconstant.h	/^   ORCALGSORTBUBBLE};$/;"	e	enum:ORCSORTALG
ORCALGSORTSELECT	include/ORCconstant.h	/^enum ORCSORTALG {ORCALGSORTSELECT = 80001,$/;"	e	enum:ORCSORTALG
ORCERR	include/ORCconstant.h	/^enum ORCERR {$/;"	g
ORCERRELEMENTNOTFOUND	include/ORCconstant.h	/^   ORCERRELEMENTNOTFOUND,$/;"	e	enum:ORCERR
ORCERREMPTYLIST	include/ORCconstant.h	/^   ORCERREMPTYLIST,$/;"	e	enum:ORCERR
ORCERREND	include/ORCconstant.h	/^   ORCERREND   = 20000$/;"	e	enum:ORCERR
ORCERRNOMEMORY	include/ORCconstant.h	/^   ORCERRNOMEMORY,$/;"	e	enum:ORCERR
ORCERRNOTSTACKANDQUEUE	include/ORCconstant.h	/^   ORCERRNOTSTACKANDQUEUE,$/;"	e	enum:ORCERR
ORCERRNOTVALIDINDEX	include/ORCconstant.h	/^   ORCERRNOTVALIDINDEX,$/;"	e	enum:ORCERR
ORCERRNULLPOINTER	include/ORCconstant.h	/^   ORCERRNULLPOINTER,$/;"	e	enum:ORCERR
ORCERRSTART	include/ORCconstant.h	/^   ORCERRSTART = 10000,$/;"	e	enum:ORCERR
ORCFILEMAXLINE	include/ORCconstant.h	10;"	d
ORCFILENAME	include/ORCconstant.h	11;"	d
ORCLISTINCREMENT	include/ORCconstant.h	8;"	d
ORCLISTINITSIZE	include/ORCconstant.h	7;"	d
ORCPOPQUEUE	include/ORCconstant.h	/^enum ORCPOPTYPE {ORCPOPQUEUE = 0, ORCPOPSTACK};$/;"	e	enum:ORCPOPTYPE
ORCPOPSTACK	include/ORCconstant.h	/^enum ORCPOPTYPE {ORCPOPQUEUE = 0, ORCPOPSTACK};$/;"	e	enum:ORCPOPTYPE
ORCPOPTYPE	include/ORCconstant.h	/^enum ORCPOPTYPE {ORCPOPQUEUE = 0, ORCPOPSTACK};$/;"	g
ORCSEARCHALG	include/ORCconstant.h	/^enum ORCSEARCHALG {ORCALGORIGINFIND = 90001};$/;"	g
ORCSList	include/ORCseqlist.h	/^typedef ORCseqlist* ORCSList;$/;"	t
ORCSORTALG	include/ORCconstant.h	/^enum ORCSORTALG {ORCALGSORTSELECT = 80001,$/;"	g
ORCbubblesort	include/ORCsort.h	/^void ORCbubblesort(int *a, int len);$/;"	p	signature:(int *a, int len)
ORCbubblesort	src/ORCsort.c	/^ORCbubblesort(int *a,$/;"	f	signature:(int *a, int len)
ORCcheckerror	include/ORC.h	/^void ORCcheckerror (int error);$/;"	p	signature:(int error)
ORCcheckerror	src/ORC.c	/^ORCcheckerror (int error) {$/;"	f	signature:(int error)
ORCdarrayfree	include/ORC.h	/^void   ORCdarrayfree (void **arr);$/;"	p	signature:(void **arr)
ORCdarrayfree	src/ORC.c	/^ORCdarrayfree (void **arr)$/;"	f	signature:(void **arr)
ORCdarraynew	include/ORC.h	/^void** ORCdarraynew (size_t row, size_t col, size_t size);$/;"	p	signature:(size_t row, size_t col, size_t size)
ORCdarraynew	src/ORC.c	/^ORCdarraynew (size_t row, size_t col, size_t size)$/;"	f	signature:(size_t row, size_t col, size_t size)
ORCdelcharofstring	include/ORCstring.h	/^int ORCdelcharofstring(char * str, int c);$/;"	p	signature:(char * str, int c)
ORCdelcharofstring	src/ORCstring.c	/^ORCdelcharofstring (char * str,$/;"	f	signature:(char * str, int c)
ORCfile	include/ORCfile.h	/^} ORCfile;$/;"	t	typeref:struct:__anon5
ORCfilecreate	include/ORCfile.h	/^int ORCfilecreate(ORCfile **fp);$/;"	p	signature:(ORCfile **fp)
ORCfilecreate	src/ORCfile.c	/^ORCfilecreate (ORCfile **fp) {$/;"	f	signature:(ORCfile **fp)
ORCfilefree	include/ORCfile.h	/^int ORCfilefree(ORCfile **fp);$/;"	p	signature:(ORCfile **fp)
ORCfilefree	src/ORCfile.c	/^ORCfilefree (ORCfile **fp){$/;"	f	signature:(ORCfile **fp)
ORCfilegetinfo	include/ORCfile.h	/^int ORCfilegetinfo(ORCfile *fp);$/;"	p	signature:(ORCfile *fp)
ORCfilegetinfo	src/ORCfile.c	/^ORCfilegetinfo (ORCfile *fp){$/;"	f	signature:(ORCfile *fp)
ORCfilegetline	include/ORCfile.h	/^int ORCfilegetline(\/*in*\/ ORCfile *fp,$/;"	p	signature:( ORCfile *fp, int max, char *line, int *length)
ORCfilegetline	src/ORCfile.c	/^ORCfilegetline (ORCfile *fp,$/;"	f	signature:(ORCfile *fp, int max, char *line, int *length)
ORCfilegetmaxline	include/ORCfile.h	/^int ORCfilegetmaxline(ORCfile *fp, char *maxline, int *max);$/;"	p	signature:(ORCfile *fp, char *maxline, int *max)
ORCfilegetmaxline	src/ORCfile.c	/^ORCfilegetmaxline (ORCfile *fp,$/;"	f	signature:(ORCfile *fp, char *maxline, int *max)
ORCfileopen	include/ORCfile.h	/^int ORCfileopen(ORCfile *fp, const char *name);$/;"	p	signature:(ORCfile *fp, const char *name)
ORCfileopen	src/ORCfile.c	/^ORCfileopen (ORCfile *fp, const char *name){$/;"	f	signature:(ORCfile *fp, const char *name)
ORCfilestatistics	include/ORCfile.h	/^int ORCfilestatistics(ORCfile *fp);$/;"	p	signature:(ORCfile *fp)
ORCfilestatistics	src/ORCfile.c	/^ORCfilestatistics (ORCfile *fp)$/;"	f	signature:(ORCfile *fp)
ORClinkedlist	include/ORClinkedlist.h	/^typedef struct ORClinkedlist{$/;"	s
ORClinkedlist	include/ORClinkedlist.h	/^} ORClinkedlist;$/;"	t	typeref:struct:ORClinkedlist
ORClinkedlistappend	include/ORClinkedlist.h	/^int  ORClinkedlistappend (ORClinkedlist *list, const char* elem);$/;"	p	signature:(ORClinkedlist *list, const char* elem)
ORClinkedlistappend	src/ORClinkedlist.c	/^ORClinkedlistappend (ORClinkedlist *list,$/;"	f	signature:(ORClinkedlist *list, const char* elem)
ORClinkedlistclear	include/ORClinkedlist.h	/^int  ORClinkedlistclear  (ORClinkedlist *list);$/;"	p	signature:(ORClinkedlist *list)
ORClinkedlistclear	src/ORClinkedlist.c	/^ORClinkedlistclear (ORClinkedlist *list)$/;"	f	signature:(ORClinkedlist *list)
ORClinkedlistfree	include/ORClinkedlist.h	/^int  ORClinkedlistfree   (ORClinkedlist **list);$/;"	p	signature:(ORClinkedlist **list)
ORClinkedlistfree	src/ORClinkedlist.c	/^ORClinkedlistfree (ORClinkedlist **list)$/;"	f	signature:(ORClinkedlist **list)
ORClinkedlistinit	include/ORClinkedlist.h	/^int  ORClinkedlistinit   (ORClinkedlist **list);$/;"	p	signature:(ORClinkedlist **list)
ORClinkedlistinit	src/ORClinkedlist.c	/^ORClinkedlistinit (ORClinkedlist **list)$/;"	f	signature:(ORClinkedlist **list)
ORClinkedlistinsert	include/ORClinkedlist.h	/^int  ORClinkedlistinsert (ORClinkedlist *list, int pos, const char* elem);$/;"	p	signature:(ORClinkedlist *list, int pos, const char* elem)
ORClinkedlistinsert	src/ORClinkedlist.c	/^ORClinkedlistinsert (ORClinkedlist *list,$/;"	f	signature:(ORClinkedlist *list, int pos, const char* elem)
ORClinkedlistlength	include/ORClinkedlist.h	/^int  ORClinkedlistlength (ORClinkedlist *list);$/;"	p	signature:(ORClinkedlist *list)
ORClinkedlistlength	src/ORClinkedlist.c	/^ORClinkedlistlength(ORClinkedlist *list)$/;"	f	signature:(ORClinkedlist *list)
ORClinkedlistoutput	include/ORClinkedlist.h	/^int  ORClinkedlistoutput (ORClinkedlist *list, const char* sp);$/;"	p	signature:(ORClinkedlist *list, const char* sp)
ORClinkedlistoutput	src/ORClinkedlist.c	/^ORClinkedlistoutput (ORClinkedlist *list,$/;"	f	signature:(ORClinkedlist *list, const char* sp)
ORClinkedlistp	include/ORClinkedlist.h	/^typedef ORClinkedlist* ORClinkedlistp;$/;"	t
ORClinkedlistpop	include/ORClinkedlist.h	/^int  ORClinkedlistpop    (ORClinkedlist *list, enum ORCPOPTYPE type);$/;"	p	signature:(ORClinkedlist *list, enum ORCPOPTYPE type)
ORClinkedlistpop	src/ORClinkedlist.c	/^ORClinkedlistpop (ORClinkedlist *list,$/;"	f	signature:(ORClinkedlist *list, enum ORCPOPTYPE type)
ORClinkednode	include/ORClinkedlist.h	/^typedef struct ORClinkednode {$/;"	s
ORClinkednode	include/ORClinkedlist.h	/^} ORClinkednode;$/;"	t	typeref:struct:ORClinkednode
ORClinkednodep	include/ORClinkedlist.h	/^typedef ORClinkednode* ORClinkednodep;$/;"	t
ORCnodeallocandinit	include/ORClinkedlist.h	/^int  ORCnodeallocandinit (ORClinkednode **node, const char* elem);$/;"	p	signature:(ORClinkednode **node, const char* elem)
ORCnodeallocandinit	src/ORClinkedlist.c	/^ORCnodeallocandinit (ORClinkednode **node,$/;"	f	signature:(ORClinkednode **node, const char* elem)
ORCnodefree	include/ORClinkedlist.h	/^void ORCnodefree           (ORClinkednode **node);$/;"	p	signature:(ORClinkednode **node)
ORCnodefree	src/ORClinkedlist.c	/^ORCnodefree (ORClinkednode **node)$/;"	f	signature:(ORClinkednode **node)
ORCoriginfind	include/ORCfind.h	/^void ORCoriginfind (int *a, int length, const int elem, int* index);$/;"	p	signature:(int *a, int length, const int elem, int* index)
ORCoriginfind	src/ORCfind.c	/^ORCoriginfind(int *a,$/;"	f	signature:(int *a, int length, const int elem, int* index)
ORCpower	include/ORCmath.h	/^int ORCpower(int base, int  n, long long *result);$/;"	p	signature:(int base, int n, long long *result)
ORCpower	src/ORCmath.c	/^ORCpower(int base,$/;"	f	signature:(int base, int n, long long *result)
ORCselectsort	include/ORCsort.h	/^void ORCselectsort(int *a, int len);$/;"	p	signature:(int *a, int len)
ORCselectsort	src/ORCsort.c	/^ORCselectsort(int *a,$/;"	f	signature:(int *a, int len)
ORCseqlist	include/ORCseqlist.h	/^} ORCseqlist;$/;"	t	typeref:struct:__anon6
ORCseqlistclear	include/ORCseqlist.h	/^int ORCseqlistclear(ORCseqlist *list);$/;"	p	signature:(ORCseqlist *list)
ORCseqlistclear	src/ORCseqlist.c	/^ORCseqlistclear (ORCseqlist *list)$/;"	f	signature:(ORCseqlist *list)
ORCseqlistcopy	include/ORCseqlist.h	/^int ORCseqlistcopy(ORCseqlist *list, const int *arr, int count);$/;"	p	signature:(ORCseqlist *list, const int *arr, int count)
ORCseqlistcopy	src/ORCseqlist.c	/^ORCseqlistcopy (ORCseqlist *list, const int *arr, int count)$/;"	f	signature:(ORCseqlist *list, const int *arr, int count)
ORCseqlistdelete	include/ORCseqlist.h	/^int ORCseqlistdelete(ORCseqlist *list, int index, int* e);$/;"	p	signature:(ORCseqlist *list, int index, int* e)
ORCseqlistdelete	src/ORCseqlist.c	/^ORCseqlistdelete (ORCseqlist *list,$/;"	f	signature:(ORCseqlist *list, int index, int *e)
ORCseqlistdeleteR	include/ORCseqlist.h	/^int ORCseqlistdeleteR(ORCseqlist *list);$/;"	p	signature:(ORCseqlist *list)
ORCseqlistdeleteR	src/ORCseqlist.c	/^ORCseqlistdeleteR(ORCseqlist *list)$/;"	f	signature:(ORCseqlist *list)
ORCseqlistfind	include/ORCseqlist.h	/^int ORCseqlistfind(ORCseqlist *list, int length, const int elem,$/;"	p	signature:(ORCseqlist *list, int length, const int elem, int *index, enum ORCSEARCHALG alg)
ORCseqlistfind	src/ORCseqlist.c	/^ORCseqlistfind (ORCseqlist *list,$/;"	f	signature:(ORCseqlist *list, int length, const int elem, int *index, enum ORCSEARCHALG alg)
ORCseqlistfree	include/ORCseqlist.h	/^int ORCseqlistfree(ORCseqlist **list);$/;"	p	signature:(ORCseqlist **list)
ORCseqlistfree	src/ORCseqlist.c	/^ORCseqlistfree (ORCseqlist **list)$/;"	f	signature:(ORCseqlist **list)
ORCseqlistinit	include/ORCseqlist.h	/^int ORCseqlistinit(ORCseqlist **list);$/;"	p	signature:(ORCseqlist **list)
ORCseqlistinit	src/ORCseqlist.c	/^ORCseqlistinit (ORCseqlist **list)$/;"	f	signature:(ORCseqlist **list)
ORCseqlistinsert	include/ORCseqlist.h	/^int ORCseqlistinsert(ORCseqlist *list, int index, const int elem);$/;"	p	signature:(ORCseqlist *list, int index, const int elem)
ORCseqlistinsert	src/ORCseqlist.c	/^ORCseqlistinsert (ORCseqlist *list,$/;"	f	signature:(ORCseqlist *list, int index, const int elem)
ORCseqlistmerge	include/ORCseqlist.h	/^int ORCseqlistmerge(ORCseqlist *des, const ORCseqlist* src);$/;"	p	signature:(ORCseqlist *des, const ORCseqlist* src)
ORCseqlistmerge	src/ORCseqlist.c	/^ORCseqlistmerge (ORCseqlist *des, const ORCseqlist* src)$/;"	f	signature:(ORCseqlist *des, const ORCseqlist* src)
ORCseqlistoutput	include/ORCseqlist.h	/^int ORCseqlistoutput(ORCseqlist *list);$/;"	p	signature:(ORCseqlist *list)
ORCseqlistoutput	src/ORCseqlist.c	/^ORCseqlistoutput (ORCseqlist *list)$/;"	f	signature:(ORCseqlist *list)
ORCseqlistsort	include/ORCseqlist.h	/^int ORCseqlistsort(ORCseqlist *list, int length, enum ORCSORTALG alg);$/;"	p	signature:(ORCseqlist *list, int length, enum ORCSORTALG alg)
ORCseqlistsort	src/ORCseqlist.c	/^ORCseqlistsort (ORCseqlist *list,$/;"	f	signature:(ORCseqlist *list, int length, enum ORCSORTALG alg)
ORCstreverse	include/ORCstring.h	/^int ORCstreverse(char *str);$/;"	p	signature:(char *str)
ORCstreverse	src/ORCstring.c	/^ORCstreverse (char *str)$/;"	f	signature:(char *str)
ORCstrlen	include/ORCstring.h	/^int ORCstrlen(const char *str, size_t *len);$/;"	p	signature:(const char *str, size_t *len)
ORCstrlen	src/ORCstring.c	/^ORCstrlen (const char *str,$/;"	f	signature:(const char *str, size_t *len)
ORCstrncat	include/ORCstring.h	/^int ORCstrncat(char *des, const char *src, int n);$/;"	p	signature:(char *des, const char *src, int n)
ORCstrncat	src/ORCstring.c	/^ORCstrncat (char *des,$/;"	f	signature:(char *des, const char *src, int n)
ORCstrncpy	include/ORCstring.h	/^int ORCstrncpy(char *des, const char *src, int n);$/;"	p	signature:(char *des, const char *src, int n)
ORCstrncpy	src/ORCstring.c	/^ORCstrncpy (char       *des,$/;"	f	signature:(char *des, const char *src, int n)
ORCstrtrim	include/ORCstring.h	/^int ORCstrtrim(char *str);$/;"	p	signature:(char *str)
ORCstrtrim	src/ORCstring.c	/^ORCstrtrim (char *str)$/;"	f	signature:(char *str)
ORCswapchar	include/ORC.h	/^void ORCswapchar (char *arr, int i, int j);$/;"	p	signature:(char *arr, int i, int j)
ORCswapchar	src/ORC.c	/^ORCswapchar (char* arr,$/;"	f	signature:(char* arr, int i, int j)
TESTDIR	bin/makefile	/^TESTDIR=..\/test\/$/;"	m
capacity	include/ORCseqlist.h	/^   int  capacity;      \/* The capacity of list*\/$/;"	m	struct:__anon6
computer	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	g	file:
elem	include/ORClinkedlist.h	/^    char               *elem;$/;"	m	struct:ORClinkednode
elemp	include/ORCseqlist.h	/^   int *elemp;     \/* The basic address of list *\/$/;"	m	struct:__anon6
error	include/ORCerrormap.h	/^   int        error;$/;"	m	struct:__anon4
errorMap	include/ORCerrormap.h	/^ErrorMap errorMap[] = {$/;"	v
first	include/ORClinkedlist.h	/^    struct ORClinkednode *first;$/;"	m	struct:ORClinkedlist	typeref:struct:ORClinkedlist::ORClinkednode
floatval	test/union.c	/^      float floatval;$/;"	m	struct:u::__anon3	file:
fun	test/cast.cpp	/^void fun(Base* base)$/;"	f	signature:(Base* base)
inout	include/inout.h	/^int inout(); $/;"	p	signature:()
inout	src/inout.c	/^int inout()$/;"	f
intval	test/union.c	/^      int intval;$/;"	m	struct:u::__anon2	file:
keyboard	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
last	include/ORClinkedlist.h	/^    struct ORClinkednode *last;$/;"	m	struct:ORClinkedlist	typeref:struct:ORClinkedlist::ORClinkednode
length	include/ORCseqlist.h	/^   int  length;        \/* The length of list *\/$/;"	m	struct:__anon6
m1	test/cast.cpp	/^      void m1()$/;"	f	class:Base	signature:()
m2	test/cast.cpp	/^      void m2()$/;"	f	class:Derived	signature:()
main	test/cast.cpp	/^int main()$/;"	f	signature:()
main	test/check_bounds.c	/^int main(void)$/;"	f	signature:(void)
main	test/enum.c	/^int main(void)$/;"	f	signature:(void)
main	test/macro.c	/^int main(void)$/;"	f	signature:(void)
main	test/sizeof.c	/^int main(void)$/;"	f	signature:(void)
main	test/terminate.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_ORC.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_ORCfile.c	/^main ()$/;"	f
main	test/test_ORCmath.c	/^int main (void)$/;"	f	signature:(void)
main	test/test_ORCstring.c	/^int main (void)$/;"	f	signature:(void)
main	test/test_link_init_and_free.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_link_many_element.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_link_one_element.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_link_readfile.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_delete.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_init_and_free.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_inout.c	/^main (void)$/;"	f	signature:(void)
main	test/test_sq_insert.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_merge.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_sort_and_find.c	/^int main(void)$/;"	f	signature:(void)
main	test/union.c	/^int main(void)$/;"	f	signature:(void)
main	test/void.c	/^int main(void)$/;"	f	signature:(void)
mouse	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
name	include/ORCfile.h	/^   char name[ORCFILENAME];$/;"	m	struct:__anon5
nchars	include/ORCfile.h	/^   long long nchars;$/;"	m	struct:__anon5
ndigits	include/ORCfile.h	/^   long long ndigits;$/;"	m	struct:__anon5
next	include/ORClinkedlist.h	/^    struct ORClinkednode *next;$/;"	m	struct:ORClinkednode	typeref:struct:ORClinkednode::ORClinkednode
nlines	include/ORCfile.h	/^   long long nlines;$/;"	m	struct:__anon5
nwords	include/ORCfile.h	/^   long long nwords;$/;"	m	struct:__anon5
p	include/ORCfile.h	/^   FILE *p;$/;"	m	struct:__anon5
prev	include/ORClinkedlist.h	/^    struct ORClinkednode *prev;$/;"	m	struct:ORClinkednode	typeref:struct:ORClinkednode::ORClinkednode
printer	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
s	test/union.c	/^   } s;$/;"	m	union:u	typeref:struct:u::__anon1	file:
screen	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
sf	test/union.c	/^   } sf;$/;"	m	union:u	typeref:struct:u::__anon3	file:
si	test/union.c	/^   } si;$/;"	m	union:u	typeref:struct:u::__anon2	file:
str	include/ORCerrormap.h	/^   const char *str;$/;"	m	struct:__anon4
testmanyelements	test/test_link_many_element.c	/^int testmanyelements()$/;"	f
testoneelement	test/test_link_one_element.c	/^int testoneelement(void)$/;"	f	signature:(void)
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon1	file:
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon2	file:
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon3	file:
u	test/union.c	/^union u{$/;"	u	file:
