!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BOOL	include/PCMconstant.h	/^   enum BOOL {$/;"	g
Base	test/cast.cpp	/^class Base$/;"	c	file:
C	bin/makefile	/^C=.c$/;"	m
CCOMPILE	bin/makefile	/^CCOMPILE=gcc$/;"	m
CHN_DIGITS	src/java/Transfer.java	/^   public static final char[] CHN_DIGITS = {$/;"	f	class:Transfer
CHN_UNITS	src/java/Transfer.java	/^   public static final char[] CHN_UNITS = {$/;"	f	class:Transfer
CPP	bin/makefile	/^CPP=.cpp$/;"	m
CPPCOMPILE	bin/makefile	/^CPPCOMPILE=g++$/;"	m
CPU	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
CSRC	bin/makefile	/^CSRC=..\/src\/c\/PCMlinkedlist$(C)\\$/;"	m
CTEST	bin/makefile	/^CTEST=$(TESTDIR)test_link_init_and_free$(C)\\$/;"	m
Derived	test/cast.cpp	/^class Derived:public Base$/;"	c	file:
E	bin/makefile	/^E=$/;"	m
EXE	bin/makefile	/^EXE=test_link_init_and_free$(E)\\$/;"	m
ErrorMap	include/PCMerrormap.h	/^   } ErrorMap;$/;"	t	typeref:struct:__anon7
FALSE	include/PCMconstant.h	/^      FALSE,$/;"	e	enum:BOOL
FREEFUNC	include/PCMconstant.h	/^   typedef void (*FREEFUNC) (void* p);$/;"	t
H_CONSTANT	include/PCMconstant.h	2;"	d
H_ERRORMAP	include/PCMerrormap.h	2;"	d
H_FIND	include/PCMfind.h	2;"	d
H_INOUT	include/inout.h	2;"	d
H_LINKEDLIST	include/PCMlinkedlist.h	2;"	d
H_PCM	include/PCM.h	2;"	d
H_PCMFILE	include/PCMfile.h	2;"	d
H_PCMMATH	include/PCMmath.h	2;"	d
H_PCMSTACK	include/PCMstack.h	2;"	d
H_PCMSTRING	include/PCMstring.h	2;"	d
H_SEQLIST	include/PCMseqlist.h	2;"	d
H_SORT	include/PCMsort.h	28;"	d
INCLUDE	bin/makefile	/^INCLUDE=..\/include\/$/;"	m
LOG	bin/makefile	/^LOG=.log$/;"	m
LOGFILES	bin/makefile	/^LOGFILES=test_link_init_and_free$(LOG)\\$/;"	m
PCMALGBINFIND	include/PCMconstant.h	/^                      PCMALGBINFIND};$/;"	e	enum:PCMSEARCHALG
PCMALGORIGINFIND	include/PCMconstant.h	/^   enum PCMSEARCHALG {PCMALGORIGINFIND = 90001,$/;"	e	enum:PCMSEARCHALG
PCMALGSORTBUBBLE	include/PCMconstant.h	/^                    PCMALGSORTBUBBLE,$/;"	e	enum:PCMSORTALG
PCMALGSORTQUICK	include/PCMconstant.h	/^                    PCMALGSORTQUICK,$/;"	e	enum:PCMSORTALG
PCMALGSORTSELECT	include/PCMconstant.h	/^   enum PCMSORTALG {PCMALGSORTSELECT = 80001,$/;"	e	enum:PCMSORTALG
PCMALGSORTSHELL	include/PCMconstant.h	/^                    PCMALGSORTSHELL};$/;"	e	enum:PCMSORTALG
PCMCHAR	include/PCMconstant.h	15;"	d
PCMERR	include/PCMconstant.h	/^   enum PCMERR {$/;"	g
PCMERRELEMENTNOTFOUND	include/PCMconstant.h	/^      PCMERRELEMENTNOTFOUND,$/;"	e	enum:PCMERR
PCMERREMPTYLIST	include/PCMconstant.h	/^      PCMERREMPTYLIST,$/;"	e	enum:PCMERR
PCMERREND	include/PCMconstant.h	/^      PCMERREND   = 20000$/;"	e	enum:PCMERR
PCMERRNOMEMORY	include/PCMconstant.h	/^      PCMERRNOMEMORY,$/;"	e	enum:PCMERR
PCMERRNOTSTACKANDQUEUE	include/PCMconstant.h	/^      PCMERRNOTSTACKANDQUEUE,$/;"	e	enum:PCMERR
PCMERRNOTVALIDINDEX	include/PCMconstant.h	/^      PCMERRNOTVALIDINDEX,$/;"	e	enum:PCMERR
PCMERRNULLPOINTER	include/PCMconstant.h	/^      PCMERRNULLPOINTER,$/;"	e	enum:PCMERR
PCMERRSTART	include/PCMconstant.h	/^      PCMERRSTART = 10000,$/;"	e	enum:PCMERR
PCMERRWRONGSORTALG	include/PCMconstant.h	/^      PCMERRWRONGSORTALG,$/;"	e	enum:PCMERR
PCMFILEMAXLINE	include/PCMconstant.h	13;"	d
PCMFILENAME	include/PCMconstant.h	14;"	d
PCMLISTINCREMENT	include/PCMconstant.h	11;"	d
PCMLISTINITSIZE	include/PCMconstant.h	10;"	d
PCMPOPQUEUE	include/PCMconstant.h	/^   enum PCMPOPTYPE {PCMPOPQUEUE = 0, PCMPOPSTACK};$/;"	e	enum:PCMPOPTYPE
PCMPOPSTACK	include/PCMconstant.h	/^   enum PCMPOPTYPE {PCMPOPQUEUE = 0, PCMPOPSTACK};$/;"	e	enum:PCMPOPTYPE
PCMPOPTYPE	include/PCMconstant.h	/^   enum PCMPOPTYPE {PCMPOPQUEUE = 0, PCMPOPSTACK};$/;"	g
PCMSEARCHALG	include/PCMconstant.h	/^   enum PCMSEARCHALG {PCMALGORIGINFIND = 90001,$/;"	g
PCMSList	include/PCMseqlist.h	/^   typedef PCMseqlist* PCMSList;$/;"	t
PCMSORTALG	include/PCMconstant.h	/^   enum PCMSORTALG {PCMALGSORTSELECT = 80001,$/;"	g
PCMbinfind	include/PCMfind.h	/^   int PCMbinfind (int *a, int length, const int elem, int *index);$/;"	p	signature:(int *a, int length, const int elem, int *index)
PCMbinfind	src/c/PCMfind.c	/^PCMbinfind(int *a, $/;"	f	signature:(int *a, int length, const int elem, int *index)
PCMbubblesort	include/PCMsort.h	/^   int PCMbubblesort(int *a, int len);$/;"	p	signature:(int *a, int len)
PCMbubblesort	src/c/PCMsort.c	/^PCMbubblesort(int *a,$/;"	f	signature:(int *a, int len)
PCMcheckerror	data/PCM.c	/^PCMcheckerror (int error) {$/;"	f	signature:(int error)
PCMcheckerror	include/PCM.h	/^   void PCMcheckerror (int error);$/;"	p	signature:(int error)
PCMcheckerror	src/c/PCM.c	/^PCMcheckerror (int error) {$/;"	f	signature:(int error)
PCMcheckpointer	data/PCM.c	/^PCMcheckpointer(void *p)$/;"	f	signature:(void *p)
PCMcheckpointer	include/PCM.h	/^   int    PCMcheckpointer (void *p);$/;"	p	signature:(void *p)
PCMcheckpointer	src/c/PCM.c	/^PCMcheckpointer(void *p)$/;"	f	signature:(void *p)
PCMcompare	data/PCM.c	/^PCMcompare (const void *x,$/;"	f	signature:(const void *x, const void *y)
PCMcompare	include/PCM.h	/^   int    PCMcompare (const void *x, const void *y);$/;"	p	signature:(const void *x, const void *y)
PCMcompare	src/c/PCM.c	/^PCMcompare (const void *x,$/;"	f	signature:(const void *x, const void *y)
PCMdarrayfree	data/PCM.c	/^PCMdarrayfree (void **arr)$/;"	f	signature:(void **arr)
PCMdarrayfree	include/PCM.h	/^   void   PCMdarrayfree (void **arr);$/;"	p	signature:(void **arr)
PCMdarrayfree	src/c/PCM.c	/^PCMdarrayfree (void **arr)$/;"	f	signature:(void **arr)
PCMdarraynew	data/PCM.c	/^PCMdarraynew (size_t row, size_t col, size_t size)$/;"	f	signature:(size_t row, size_t col, size_t size)
PCMdarraynew	include/PCM.h	/^   void** PCMdarraynew (size_t row, size_t col, size_t size);$/;"	p	signature:(size_t row, size_t col, size_t size)
PCMdarraynew	src/c/PCM.c	/^PCMdarraynew (size_t row, size_t col, size_t size)$/;"	f	signature:(size_t row, size_t col, size_t size)
PCMdelcharofstring	include/PCMstring.h	/^   int PCMdelcharofstring(char * str, int c);$/;"	p	signature:(char * str, int c)
PCMdelcharofstring	src/c/PCMstring.c	/^PCMdelcharofstring (char * str,$/;"	f	signature:(char * str, int c)
PCMfile	include/PCMfile.h	/^   } PCMfile;$/;"	t	typeref:struct:__anon4
PCMfilecreate	include/PCMfile.h	/^   int PCMfilecreate(PCMfile **fp);$/;"	p	signature:(PCMfile **fp)
PCMfilecreate	src/c/PCMfile.c	/^PCMfilecreate (PCMfile **fp) {$/;"	f	signature:(PCMfile **fp)
PCMfilefree	include/PCMfile.h	/^   int PCMfilefree(PCMfile **fp);$/;"	p	signature:(PCMfile **fp)
PCMfilefree	src/c/PCMfile.c	/^PCMfilefree (PCMfile **fp){$/;"	f	signature:(PCMfile **fp)
PCMfilegetinfo	include/PCMfile.h	/^   int PCMfilegetinfo(PCMfile *fp);$/;"	p	signature:(PCMfile *fp)
PCMfilegetinfo	src/c/PCMfile.c	/^PCMfilegetinfo (PCMfile *fp){$/;"	f	signature:(PCMfile *fp)
PCMfilegetline	include/PCMfile.h	/^   int PCMfilegetline(\/*in*\/ PCMfile *fp,$/;"	p	signature:( PCMfile *fp, int max, char *line, int *length)
PCMfilegetline	src/c/PCMfile.c	/^PCMfilegetline (PCMfile *fp,$/;"	f	signature:(PCMfile *fp, int max, char *line, int *length)
PCMfilegetmaxline	include/PCMfile.h	/^   int PCMfilegetmaxline(PCMfile *fp, char *maxline, int *max);$/;"	p	signature:(PCMfile *fp, char *maxline, int *max)
PCMfilegetmaxline	src/c/PCMfile.c	/^PCMfilegetmaxline (PCMfile *fp,$/;"	f	signature:(PCMfile *fp, char *maxline, int *max)
PCMfileopen	include/PCMfile.h	/^   int PCMfileopen(PCMfile *fp, const char *name);$/;"	p	signature:(PCMfile *fp, const char *name)
PCMfileopen	src/c/PCMfile.c	/^PCMfileopen (PCMfile *fp, const char *name){$/;"	f	signature:(PCMfile *fp, const char *name)
PCMfilestatistics	include/PCMfile.h	/^   int PCMfilestatistics(PCMfile *fp);$/;"	p	signature:(PCMfile *fp)
PCMfilestatistics	src/c/PCMfile.c	/^PCMfilestatistics (PCMfile *fp)$/;"	f	signature:(PCMfile *fp)
PCMlinkedlist	include/PCMlinkedlist.h	/^   typedef struct PCMlinkedlist{$/;"	s
PCMlinkedlist	include/PCMlinkedlist.h	/^   } PCMlinkedlist;$/;"	t	typeref:struct:PCMlinkedlist
PCMlinkedlistappend	include/PCMlinkedlist.h	/^   int  PCMlinkedlistappend (PCMlinkedlist *list, const char* elem);$/;"	p	signature:(PCMlinkedlist *list, const char* elem)
PCMlinkedlistappend	src/c/PCMlinkedlist.c	/^PCMlinkedlistappend (PCMlinkedlist *list,$/;"	f	signature:(PCMlinkedlist *list, const char* elem)
PCMlinkedlistclear	include/PCMlinkedlist.h	/^   int  PCMlinkedlistclear  (PCMlinkedlist *list);$/;"	p	signature:(PCMlinkedlist *list)
PCMlinkedlistclear	src/c/PCMlinkedlist.c	/^PCMlinkedlistclear (PCMlinkedlist *list)$/;"	f	signature:(PCMlinkedlist *list)
PCMlinkedlistfree	include/PCMlinkedlist.h	/^   int  PCMlinkedlistfree   (PCMlinkedlist **list);$/;"	p	signature:(PCMlinkedlist **list)
PCMlinkedlistfree	src/c/PCMlinkedlist.c	/^PCMlinkedlistfree (PCMlinkedlist **list)$/;"	f	signature:(PCMlinkedlist **list)
PCMlinkedlistinit	include/PCMlinkedlist.h	/^   int  PCMlinkedlistinit   (PCMlinkedlist **list);$/;"	p	signature:(PCMlinkedlist **list)
PCMlinkedlistinit	src/c/PCMlinkedlist.c	/^PCMlinkedlistinit (PCMlinkedlist **list)$/;"	f	signature:(PCMlinkedlist **list)
PCMlinkedlistinsert	include/PCMlinkedlist.h	/^   int  PCMlinkedlistinsert (PCMlinkedlist *list, int pos, const char* elem);$/;"	p	signature:(PCMlinkedlist *list, int pos, const char* elem)
PCMlinkedlistinsert	src/c/PCMlinkedlist.c	/^PCMlinkedlistinsert (PCMlinkedlist *list,$/;"	f	signature:(PCMlinkedlist *list, int pos, const char* elem)
PCMlinkedlistlength	include/PCMlinkedlist.h	/^   int  PCMlinkedlistlength (PCMlinkedlist *list);$/;"	p	signature:(PCMlinkedlist *list)
PCMlinkedlistlength	src/c/PCMlinkedlist.c	/^PCMlinkedlistlength(PCMlinkedlist *list)$/;"	f	signature:(PCMlinkedlist *list)
PCMlinkedlistoutput	include/PCMlinkedlist.h	/^   int  PCMlinkedlistoutput (PCMlinkedlist *list, const char* sp);$/;"	p	signature:(PCMlinkedlist *list, const char* sp)
PCMlinkedlistoutput	src/c/PCMlinkedlist.c	/^PCMlinkedlistoutput (PCMlinkedlist *list,$/;"	f	signature:(PCMlinkedlist *list, const char* sp)
PCMlinkedlistp	include/PCMlinkedlist.h	/^   typedef PCMlinkedlist* PCMlinkedlistp;$/;"	t
PCMlinkedlistpop	include/PCMlinkedlist.h	/^   int  PCMlinkedlistpop    (PCMlinkedlist *list, enum PCMPOPTYPE type);$/;"	p	signature:(PCMlinkedlist *list, enum PCMPOPTYPE type)
PCMlinkedlistpop	src/c/PCMlinkedlist.c	/^PCMlinkedlistpop (PCMlinkedlist *list,$/;"	f	signature:(PCMlinkedlist *list, enum PCMPOPTYPE type)
PCMlinkednode	include/PCMlinkedlist.h	/^   typedef struct PCMlinkednode {$/;"	s
PCMlinkednode	include/PCMlinkedlist.h	/^   } PCMlinkednode;$/;"	t	typeref:struct:PCMlinkednode
PCMlinkednodep	include/PCMlinkedlist.h	/^   typedef PCMlinkednode* PCMlinkednodep;$/;"	t
PCMnodeallocandinit	include/PCMlinkedlist.h	/^   int  PCMnodeallocandinit (PCMlinkednode **node, const char* elem);$/;"	p	signature:(PCMlinkednode **node, const char* elem)
PCMnodeallocandinit	src/c/PCMlinkedlist.c	/^PCMnodeallocandinit (PCMlinkednode **node,$/;"	f	signature:(PCMlinkednode **node, const char* elem)
PCMnodefree	include/PCMlinkedlist.h	/^   void PCMnodefree           (PCMlinkednode **node);$/;"	p	signature:(PCMlinkednode **node)
PCMnodefree	src/c/PCMlinkedlist.c	/^PCMnodefree (PCMlinkednode **node)$/;"	f	signature:(PCMlinkednode **node)
PCMoriginfind	include/PCMfind.h	/^   int PCMoriginfind (int *a, int length, const int elem, int *index);$/;"	p	signature:(int *a, int length, const int elem, int *index)
PCMoriginfind	src/c/PCMfind.c	/^PCMoriginfind(int *a,$/;"	f	signature:(int *a, int length, const int elem, int *index)
PCMpower	include/PCMmath.h	/^   int PCMpower(int base, int  n, long long *result);$/;"	p	signature:(int base, int n, long long *result)
PCMpower	src/c/PCMmath.c	/^PCMpower(int base,$/;"	f	signature:(int base, int n, long long *result)
PCMselectsort	include/PCMsort.h	/^   int PCMselectsort(int *a, int len);$/;"	p	signature:(int *a, int len)
PCMselectsort	src/c/PCMsort.c	/^PCMselectsort(int *a,$/;"	f	signature:(int *a, int len)
PCMseqlist	include/PCMseqlist.h	/^   } PCMseqlist;$/;"	t	typeref:struct:__anon6
PCMseqlistclear	include/PCMseqlist.h	/^   int PCMseqlistclear(PCMseqlist *list);$/;"	p	signature:(PCMseqlist *list)
PCMseqlistclear	src/c/PCMseqlist.c	/^PCMseqlistclear (PCMseqlist *list)$/;"	f	signature:(PCMseqlist *list)
PCMseqlistcopy	include/PCMseqlist.h	/^   int PCMseqlistcopy(PCMseqlist *list, const int *arr, int count);$/;"	p	signature:(PCMseqlist *list, const int *arr, int count)
PCMseqlistcopy	src/c/PCMseqlist.c	/^PCMseqlistcopy (PCMseqlist *list, const int *arr, int count)$/;"	f	signature:(PCMseqlist *list, const int *arr, int count)
PCMseqlistdelete	include/PCMseqlist.h	/^   int PCMseqlistdelete(PCMseqlist *list, int index, int* e);$/;"	p	signature:(PCMseqlist *list, int index, int* e)
PCMseqlistdelete	src/c/PCMseqlist.c	/^PCMseqlistdelete (PCMseqlist *list,$/;"	f	signature:(PCMseqlist *list, int index, int *e)
PCMseqlistdeleteR	include/PCMseqlist.h	/^   int PCMseqlistdeleteR(PCMseqlist *list);$/;"	p	signature:(PCMseqlist *list)
PCMseqlistdeleteR	src/c/PCMseqlist.c	/^PCMseqlistdeleteR(PCMseqlist *list)$/;"	f	signature:(PCMseqlist *list)
PCMseqlistfind	include/PCMseqlist.h	/^   int PCMseqlistfind(PCMseqlist *list, int length, const int elem,$/;"	p	signature:(PCMseqlist *list, int length, const int elem, int *index, enum PCMSEARCHALG alg)
PCMseqlistfind	src/c/PCMseqlist.c	/^PCMseqlistfind (PCMseqlist *list,$/;"	f	signature:(PCMseqlist *list, int length, const int elem, int *index, enum PCMSEARCHALG alg)
PCMseqlistfree	include/PCMseqlist.h	/^   int PCMseqlistfree(PCMseqlist **list);$/;"	p	signature:(PCMseqlist **list)
PCMseqlistfree	src/c/PCMseqlist.c	/^PCMseqlistfree (PCMseqlist **list)$/;"	f	signature:(PCMseqlist **list)
PCMseqlistinit	include/PCMseqlist.h	/^   int PCMseqlistinit(PCMseqlist **list);$/;"	p	signature:(PCMseqlist **list)
PCMseqlistinit	src/c/PCMseqlist.c	/^PCMseqlistinit (PCMseqlist **list)$/;"	f	signature:(PCMseqlist **list)
PCMseqlistinsert	include/PCMseqlist.h	/^   int PCMseqlistinsert(PCMseqlist *list, int index, const int elem);$/;"	p	signature:(PCMseqlist *list, int index, const int elem)
PCMseqlistinsert	src/c/PCMseqlist.c	/^PCMseqlistinsert (PCMseqlist *list,$/;"	f	signature:(PCMseqlist *list, int index, const int elem)
PCMseqlistmerge	include/PCMseqlist.h	/^   int PCMseqlistmerge(PCMseqlist *des, const PCMseqlist* src);$/;"	p	signature:(PCMseqlist *des, const PCMseqlist* src)
PCMseqlistmerge	src/c/PCMseqlist.c	/^PCMseqlistmerge (PCMseqlist *des, const PCMseqlist* src)$/;"	f	signature:(PCMseqlist *des, const PCMseqlist* src)
PCMseqlistoutput	include/PCMseqlist.h	/^   int PCMseqlistoutput(PCMseqlist *list);$/;"	p	signature:(PCMseqlist *list)
PCMseqlistoutput	src/c/PCMseqlist.c	/^PCMseqlistoutput (PCMseqlist *list)$/;"	f	signature:(PCMseqlist *list)
PCMseqlistsort	include/PCMseqlist.h	/^   int PCMseqlistsort(PCMseqlist *list, int length, enum PCMSORTALG alg);$/;"	p	signature:(PCMseqlist *list, int length, enum PCMSORTALG alg)
PCMseqlistsort	src/c/PCMseqlist.c	/^PCMseqlistsort (PCMseqlist *list,$/;"	f	signature:(PCMseqlist *list, int length, enum PCMSORTALG alg)
PCMshellsort	include/PCMsort.h	/^   int PCMshellsort (int *a, int len);$/;"	p	signature:(int *a, int len)
PCMshellsort	src/c/PCMsort.c	/^PCMshellsort(int *a,$/;"	f	signature:(int *a, int len)
PCMstack	include/PCMstack.h	/^   } PCMstack;$/;"	t	typeref:struct:__anon5
PCMstackcreate	include/PCMstack.h	/^   int   PCMstackcreate  (PCMstack **sp, size_t size);$/;"	p	signature:(PCMstack **sp, size_t size)
PCMstackcreate	src/c/PCMstack.c	/^PCMstackcreate (PCMstack **sp, size_t size){$/;"	f	signature:(PCMstack **sp, size_t size)
PCMstackfree	include/PCMstack.h	/^   void  PCMstackfree    (PCMstack **sp, FREEFUNC freefunc);$/;"	p	signature:(PCMstack **sp, FREEFUNC freefunc)
PCMstackfree	src/c/PCMstack.c	/^PCMstackfree (PCMstack **sp, FREEFUNC freefunc)$/;"	f	signature:(PCMstack **sp, FREEFUNC freefunc)
PCMstackisempty	include/PCMstack.h	/^   int   PCMstackisempty (PCMstack *s);$/;"	p	signature:(PCMstack *s)
PCMstackisempty	src/c/PCMstack.c	/^PCMstackisempty (PCMstack *s)$/;"	f	signature:(PCMstack *s)
PCMstackpop	include/PCMstack.h	/^   void* PCMstackpop     (PCMstack *s);$/;"	p	signature:(PCMstack *s)
PCMstackpop	src/c/PCMstack.c	/^PCMstackpop (PCMstack *s)$/;"	f	signature:(PCMstack *s)
PCMstackpush	include/PCMstack.h	/^   int   PCMstackpush    (PCMstack *s, void *elem);$/;"	p	signature:(PCMstack *s, void *elem)
PCMstackpush	src/c/PCMstack.c	/^PCMstackpush (PCMstack *s, void *elem)$/;"	f	signature:(PCMstack *s, void *elem)
PCMstrblkstoblk	include/PCMstring.h	/^   int PCMstrblkstoblk(char *str);$/;"	p	signature:(char *str)
PCMstrblkstoblk	src/c/PCMstring.c	/^PCMstrblkstoblk (char *str) {$/;"	f	signature:(char *str)
PCMstreverse	include/PCMstring.h	/^   int PCMstreverse(char *str);$/;"	p	signature:(char *str)
PCMstreverse	src/c/PCMstring.c	/^PCMstreverse (char *str)$/;"	f	signature:(char *str)
PCMstrindex	include/PCMstring.h	/^   int PCMstrindex(char *str, char* substr, int *index);$/;"	p	signature:(char *str, char* substr, int *index)
PCMstrindex	src/c/PCMstring.c	/^PCMstrindex(char *str, char *substr, int *index)$/;"	f	signature:(char *str, char *substr, int *index)
PCMstrlen	include/PCMstring.h	/^   int PCMstrlen(const char *str, size_t *len);$/;"	p	signature:(const char *str, size_t *len)
PCMstrlen	src/c/PCMstring.c	/^PCMstrlen (const char *str,$/;"	f	signature:(const char *str, size_t *len)
PCMstrncat	include/PCMstring.h	/^   int PCMstrncat(char *des, const char *src, int n);$/;"	p	signature:(char *des, const char *src, int n)
PCMstrncat	src/c/PCMstring.c	/^PCMstrncat (char *des,$/;"	f	signature:(char *des, const char *src, int n)
PCMstrncpy	include/PCMstring.h	/^   int PCMstrncpy(char *des, const char *src, int n);$/;"	p	signature:(char *des, const char *src, int n)
PCMstrncpy	src/c/PCMstring.c	/^PCMstrncpy (char       *des,$/;"	f	signature:(char *des, const char *src, int n)
PCMstrtrim	include/PCMstring.h	/^   int PCMstrtrim(char *str);$/;"	p	signature:(char *str)
PCMstrtrim	src/c/PCMstring.c	/^PCMstrtrim (char *str)$/;"	f	signature:(char *str)
PCMswapchar	data/PCM.c	/^PCMswapchar (char* arr,$/;"	f	signature:(char* arr, int i, int j)
PCMswapchar	include/PCM.h	/^   void PCMswapchar (char *arr, int i, int j);$/;"	p	signature:(char *arr, int i, int j)
PCMswapchar	src/c/PCM.c	/^PCMswapchar (char* arr,$/;"	f	signature:(char* arr, int i, int j)
TESTDIR	bin/makefile	/^TESTDIR=..\/test\/$/;"	m
TRUE	include/PCMconstant.h	/^      TRUE$/;"	e	enum:BOOL
Transfer	src/java/Transfer.java	/^public class Transfer$/;"	c
capacity	include/PCMseqlist.h	/^      int  capacity;      \/* The capacity of list*\/$/;"	m	struct:__anon6
computer	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	g	file:
countofchar	include/PCMfile.h	/^      long long countofchar[PCMCHAR];$/;"	m	struct:__anon4
data	include/PCMstack.h	/^      void   **data;$/;"	m	struct:__anon5
elem	include/PCMlinkedlist.h	/^      char               *elem;$/;"	m	struct:PCMlinkednode
elemp	include/PCMseqlist.h	/^      int *elemp;     \/* The basic address of list *\/$/;"	m	struct:__anon6
error	include/PCMerrormap.h	/^      int        error;$/;"	m	struct:__anon7
errorMap	include/PCMerrormap.h	/^      ErrorMap errorMap[] = {$/;"	v
first	include/PCMlinkedlist.h	/^      struct PCMlinkednode *first;$/;"	m	struct:PCMlinkedlist	typeref:struct:PCMlinkedlist::PCMlinkednode
floatval	test/union.c	/^      float floatval;$/;"	m	struct:u::__anon3	file:
fun	test/cast.cpp	/^void fun(Base* base)$/;"	f	signature:(Base* base)
inout	include/inout.h	/^   int inout(); $/;"	p	signature:()
inout	src/c/inout.c	/^int inout()$/;"	f
intval	test/union.c	/^      int intval;$/;"	m	struct:u::__anon2	file:
keyboard	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
last	include/PCMlinkedlist.h	/^      struct PCMlinkednode *last;$/;"	m	struct:PCMlinkedlist	typeref:struct:PCMlinkedlist::PCMlinkednode
length	include/PCMseqlist.h	/^      int  length;        \/* The length of list *\/$/;"	m	struct:__anon6
m1	test/cast.cpp	/^      void m1()$/;"	f	class:Base	signature:()
m2	test/cast.cpp	/^      void m2()$/;"	f	class:Derived	signature:()
main	src/java/Transfer.java	/^   public static void main(String[] args)$/;"	m	class:Transfer	signature:(String[] args)
main	test/cast.cpp	/^int main()$/;"	f	signature:()
main	test/enum.c	/^int main(void)$/;"	f	signature:(void)
main	test/macro.c	/^int main(void)$/;"	f	signature:(void)
main	test/sizeof.c	/^int main(void)$/;"	f	signature:(void)
main	test/terminate.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_PCM.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_PCMfile.c	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test_PCMmath.c	/^int main (void)$/;"	f	signature:(void)
main	test/test_PCMstack.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_PCMstring.c	/^int main (void)$/;"	f	signature:(void)
main	test/test_check_bounds.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_link_init_and_free.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_link_many_element.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_link_one_element.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_link_readfile.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_delete.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_init_and_free.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_inout.c	/^main (void)$/;"	f	signature:(void)
main	test/test_sq_insert.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_merge.c	/^int main(void)$/;"	f	signature:(void)
main	test/test_sq_sort_and_find.c	/^int main(void)$/;"	f	signature:(void)
main	test/unicode.c	/^int main()$/;"	f
main	test/union.c	/^int main(void)$/;"	f	signature:(void)
main	test/void.c	/^int main(void)$/;"	f	signature:(void)
mouse	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
name	include/PCMfile.h	/^      char name[PCMFILENAME];$/;"	m	struct:__anon4
nbytes	include/PCMfile.h	/^      long long nbytes;$/;"	m	struct:__anon4
ndigits	include/PCMfile.h	/^      long long ndigits;$/;"	m	struct:__anon4
next	include/PCMlinkedlist.h	/^      struct PCMlinkednode *next;$/;"	m	struct:PCMlinkednode	typeref:struct:PCMlinkednode::PCMlinkednode
nlines	include/PCMfile.h	/^      long long nlines;$/;"	m	struct:__anon4
nwords	include/PCMfile.h	/^      long long nwords;$/;"	m	struct:__anon4
p	include/PCMfile.h	/^      FILE *p;$/;"	m	struct:__anon4
prev	include/PCMlinkedlist.h	/^      struct PCMlinkednode *prev;$/;"	m	struct:PCMlinkednode	typeref:struct:PCMlinkednode::PCMlinkednode
printer	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
s	test/union.c	/^   } s;$/;"	m	union:u	typeref:struct:u::__anon1	file:
screen	test/enum.c	/^enum computer {keyboard, CPU, screen, printer, mouse};$/;"	e	enum:computer	file:
sf	test/union.c	/^   } sf;$/;"	m	union:u	typeref:struct:u::__anon3	file:
si	test/union.c	/^   } si;$/;"	m	union:u	typeref:struct:u::__anon2	file:
size	include/PCMstack.h	/^      size_t size;$/;"	m	struct:__anon5
str	include/PCMerrormap.h	/^      const char *str;$/;"	m	struct:__anon7
testmanyelements	test/test_link_many_element.c	/^int testmanyelements()$/;"	f
testoneelement	test/test_link_one_element.c	/^int testoneelement(void)$/;"	f	signature:(void)
toChineseNumber	src/java/Transfer.java	/^   public static String toChineseNumber(double n)$/;"	m	class:Transfer	signature:(double n)
top	include/PCMstack.h	/^      int    top;$/;"	m	struct:__anon5
trans	src/java/Transfer.java	/^   private static void trans(long n, StringBuilder result)$/;"	m	class:Transfer	file:	signature:(long n, StringBuilder result)
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon1	file:
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon2	file:
type	test/union.c	/^      int type;$/;"	m	struct:u::__anon3	file:
u	test/union.c	/^union u{$/;"	u	file:
