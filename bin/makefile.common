# -*- makefile.common -*-
# #####################################################################
# driver for makefiles in bin subdirectories
# #####################################################################
help:
	@(echo "" \
	;echo "Choose a target:" \
	;echo "" \
	;echo "make [help]      -- print this help screen" \
	;echo "make [test_readfile.exe]   -- build test_init_and_free.exe" \
	;echo "make [orctest]  -- build all tests" \
	;echo "make [splint]    -- use splint to check all C files" \
	;echo "make [clean]     -- delete all *.exe and *.log files"\
	;echo "make [testclean] -- delete all *.log files"\
	;echo "make [orc]"      -- compile all c/c++ programs\
	;echo "make [tags]"     -- generate ctags\
	)

compile =                                                    \
         $(CCOMPILE) -g -pg -I $(INCLUDE) $(TESTDIR)$(1)$(C) $(CSRC) \
         -o $(1)$(E);
test =                                                        \
         if test -e gmon.out; then rm gmon.out; fi; \
         ./$(1)$(E) > $(1)$(LOG);                \
			gprof $(1)$(E) gmon.out > $(1).profile; 
         #cat $(1)$(LOG)
tags:
	@cd ../;ctags -R --c-kinds=+p --fields=+S . 
cppcompile =                                                  \
         $(CPPCOMPILE) -I $(INCLUDE) $(TESTDIR)$(1)$(CPP) $(CPPSRC) \
			-o $(1)$(E);                                                   
orc: $(EXE) tags

orctest: $(LOGFILES)
	@if test `cat $(LOGFILES) | grep 'ORC Error' | wc -l` -gt 0; then \
	  echo "";\
	  echo "ORC Errors found!"; \
	  echo "";\
     grep 'ORC Error' *.log > error;cat error;\
	else \
	  echo "All tests completed successfully"; \
	fi
splint: $(CSRC) $(CTEST)
	@splint -I $(INCLUDE) $(CSRC) $(CTEST) > splint
testclean:
	@rm -f  *$(LOG)
clean: testclean
	@rm -f error gmon.out test_* splint *.stackdump
# C files
test_link_init_and_free$(E): $(CSRC) $(TESTDIR)test_link_init_and_free$(C)
	$(call compile,test_link_init_and_free)
test_link_init_and_free$(LOG): test_link_init_and_free$(E)
	$(call test,test_link_init_and_free)

test_link_one_element$(E): $(CSRC) $(TESTDIR)test_link_one_element$(C)
	$(call compile,test_link_one_element)
test_link_one_element$(LOG): test_link_one_element$(E)
	$(call test,test_link_one_element)

test_link_many_element$(E): $(CSRC) $(TESTDIR)test_link_many_element$(C)
	$(call compile,test_link_many_element)
test_link_many_element$(LOG): test_link_many_element$(E)
	$(call test,test_link_many_element)

test_link_readfile$(E): $(CSRC) $(TESTDIR)test_link_readfile$(C)
	$(call compile,test_link_readfile)
test_link_readfile$(LOG): test_link_readfile$(E)
	$(call test,test_link_readfile)

test_check_bounds$(E): $(CSRC) $(TESTDIR)test_check_bounds$(C)
	$(call compile,test_check_bounds)
test_check_bounds$(LOG): test_check_bounds$(E)
	$(call test,test_check_bounds)

test_sq_inout$(E): $(CSRC) $(TESTDIR)test_sq_inout$(C)
	$(call compile,test_sq_inout)
test_sq_inout$(LOG): test_sq_inout$(E)
	$(call test,test_sq_inout)

test_sq_init_and_free$(E):$(CSRC) $(TESTDIR)test_sq_init_and_free$(C)
	$(call compile,test_sq_init_and_free)
test_sq_init_and_free$(LOG): test_sq_init_and_free$(E)
	$(call test,test_sq_init_and_free)

test_sq_delete$(E): $(CSRC) $(TESTDIR)test_sq_delete$(C)
	$(call compile,test_sq_delete)
test_sq_delete$(LOG): test_sq_delete$(E)
	$(call test,test_sq_delete)

test_sq_insert$(E): $(CSRC) $(TESTDIR)test_sq_insert$(C)
	$(call compile,test_sq_insert)
test_sq_insert$(LOG): test_sq_insert$(E)
	$(call test,test_sq_insert)

test_sq_merge$(E): $(CSRC) $(TESTDIR)test_sq_merge$(C)
	$(call compile,test_sq_merge)
test_sq_merge$(LOG): test_sq_merge$(E)
	$(call test,test_sq_merge)

test_sq_sort_and_find$(E): $(CSRC) $(TESTDIR)test_sq_sort_and_find$(C)
	$(call compile,test_sq_sort_and_find)
test_sq_sort_and_find$(LOG): test_sq_sort_and_find$(E)
	$(call test,test_sq_sort_and_find)

test_ORCstring$(E): $(CSRC) $(TESTDIR)test_ORCstring$(C)
	$(call compile,test_ORCstring)
test_ORCstring$(LOG): test_ORCstring$(E)
	$(call test,test_ORCstring)

test_ORCmath$(E): $(CSRC) $(TESTDIR)test_ORCmath$(C)
	$(call compile,test_ORCmath)
test_ORCmath$(LOG): test_ORCmath$(E)
	$(call test,test_ORCmath)

test_ORCfile$(E): $(CSRC) $(TESTDIR)test_ORCfile$(C)
	$(call compile,test_ORCfile)
test_ORCfile$(LOG): test_ORCfile$(E)
	$(call test,test_ORCfile)

test_ORC$(E): $(CSRC) $(TESTDIR)test_ORC$(C)
	$(call compile,test_ORC)
test_ORC$(LOG): test_ORC$(E)
	$(call test,test_ORC)

# C++ files
cast$(E): $(CPPSRC) $(TESTDIR)cast$(CPP)
	$(call cppcompile,cast)
cast$(LOG): cast$(E)
	$(call test,cast)

.PHONY: test splint clean

