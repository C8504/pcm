# -*- makefile.common -*-
# #####################################################################
# driver for makefiles in bin subdirectories
# #####################################################################
help:
	@(echo "" \
	;echo "Choose a target:" \
	;echo "" \
	;echo "make [help]                               -- print this help screen" \
	;echo "make [exe/test_PCM_array]                 -- build test_PCM_array" \
	;echo "make [log/test_PCM_link.log]              -- run test_PCM_link" \
	;echo "make [profile/test_link.profile]          -- profile test_PCM_array" \
	;echo "make [pcmtest]                            -- build all tests" \
	;echo "make [splint]                             -- use splint to check all C files" \
	;echo "make [clean]                              -- delete all *.exe and *.log files" \
	;echo "make [testclean]                          -- delete all *.log files" \
	;echo "make [pcm]                                -- compile all c/c++ programs" \
	;echo "make [tags]                               -- generate ctags" \
	)

compile =                                                 \
         if !(test -d exe); then mkdir exe; fi; \
         if !(test -d log); then mkdir log; fi; \
         if !(test -d profile); then mkdir profile; fi; \
         if !(test -d splint); then mkdir splint; fi; \
         $(CCOMPILE) $(OTHER) $(INCLUDE) $(CTESTDIR)$(1)$(C) $(CSRC) \
         -o $(EXEDIR)$(1)$(E);
test =                                                        \
         if test -e gmon.out; then rm gmon.out; fi; \
         ./$(EXEDIR)$(1)$(E) > $(LOGDIR)$(1)$(LOG);                \
			gprof $(EXEDIR)$(1)$(E) gmon.out > $(PROFDIR)$(1).profile; 

cppcompile =                                                  \
         $(CPPCOMPILE) -I $(INCLUDE) $(CTESTDIR)$(1)$(CPP) $(CPPSRC) \
         -o $(EXEDIR)$(1)$(E);                                                   

pcm: $(EXE)

lib:
	$(CCOMPILE) -c $(OTHER) $(INCLUDE) $(CSRC)
	ar cr libpcm.a *.o
	if !(test -d ../lib); then mkdir ../lib; fi
	cp -p libpcm.a ../lib/libpcm.a
	rm *.a
	rm *.o

pcmpy:
	swig -python PCM_Python.i
	$(CCOMPILE) -c -fpic $(OTHER) $(INCLUDE) $(CSRC) \
	-I /usr/include/python2.6 *.c
	$(CCOMPILE) -shared *.o -o _PCM_Python.so

pcmtest: $(LOGFILES)
	@if test `cat $(LOGFILES) | grep 'PCM Error' | wc -l` -gt 0; then \
	  echo "";\
	  echo "PCM Errors found!"; \
	  echo "";\
	  grep 'PCM Error' */*.log > error;cat error;\
	else \
	  echo "All tests completed successfully"; \
	fi

splint: $(CSRC)
	@splint -I $(INCLUDE) $(CSRC) > $(SPLINTDIR)/PCM.splint

testclean:
	@rm -f  $(LOGDIR)* $(PROFDIR)* $(EXEDIR)* $(SPLINTDIR)/*
	@rm -f -r $(LOGDIR) $(PROFDIR) $(EXEDIR) $(SPLINTDIR)

clean: testclean
	@rm -f error  */*.stackdump gmon.out *.o *.c *pyc *.so */*.a

# C files

$(EXEDIR)test_PCM_string$(E): $(CSRC) $(CTESTDIR)test_PCM_string$(C)
	$(call compile,test_PCM_string)
$(LOGDIR)test_PCM_string$(LOG): $(EXEDIR)test_PCM_string$(E)
	$(call test,test_PCM_string)

$(EXEDIR)test_PCM_math$(E): $(CSRC) $(CTESTDIR)test_PCM_math$(C)
	$(call compile,test_PCM_math)
$(LOGDIR)test_PCM_math$(LOG): $(EXEDIR)test_PCM_math$(E)
	$(call test,test_PCM_math)

$(EXEDIR)test_PCM_file$(E): $(CSRC) $(CTESTDIR)test_PCM_file$(C)
	$(call compile,test_PCM_file)
$(LOGDIR)test_PCM_file$(LOG): $(EXEDIR)test_PCM_file$(E)
	$(call test,test_PCM_file)

$(EXEDIR)test_PCM$(E): $(CSRC) $(CTESTDIR)test_PCM$(C)
	$(call compile,test_PCM)
$(LOGDIR)test_PCM$(LOG): $(EXEDIR)test_PCM$(E)
	$(call test,test_PCM)

$(EXEDIR)test_PCM_stack$(E): $(CSRC) $(CTESTDIR)test_PCM_stack$(C)
	$(call compile,test_PCM_stack)
$(LOGDIR)test_PCM_stack$(LOG): $(EXEDIR)test_PCM_stack$(E)
	$(call test,test_PCM_stack)

$(EXEDIR)test_PCM_array$(E): $(CSRC) $(CTESTDIR)test_PCM_array$(C)
	$(call compile,test_PCM_array)
$(LOGDIR)test_PCM_array$(LOG): $(EXEDIR)test_PCM_array$(E)
	$(call test,test_PCM_array)

$(EXEDIR)test_PCM_link$(E): $(CSRC) $(CTESTDIR)test_PCM_link$(C)
	$(call compile,test_PCM_link)
$(LOGDIR)test_PCM_link$(LOG): $(EXEDIR)test_PCM_link$(E)
	$(call test,test_PCM_link)

# C++ files
$(EXEDIR)cast$(E): $(CPPSRC) $(CTESTDIR)cast$(CPP)
	$(call cppcompile,cast)
$(LOGDIR)cast$(LOG): $(EXEDIR)cast$(E)
	$(call test,cast)

.PHONY: test splint clean pcmpy

